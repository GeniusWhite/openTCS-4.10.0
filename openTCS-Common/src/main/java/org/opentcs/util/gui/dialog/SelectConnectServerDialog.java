/**
 * Copyright (c) The openTCS Authors.
 * <p>
 * This program is free software and subject to the MIT license. (For details,
 * see the licensing information (LICENSE.txt) you should have received with
 * this copy of the software.)
 */
package org.opentcs.util.gui.dialog;

import org.opentcs.constants.LSDefaultConstants;
import org.opentcs.util.gui.Icons;

import javax.swing.*;
import java.awt.*;
import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.util.*;
import java.util.List;

/**
 * A dialog that lets the user enter parameters for a connection to the portal.
 *
 * @author Heinz Huber (Fraunhofer IML)
 * @author Stefan Walter (Fraunhofer IML)
 */
public class SelectConnectServerDialog
        extends JDialog {

    /**
     * This class's resource bundle.
     */
    private static final ResourceBundle BUNDLE
            = ResourceBundle.getBundle("org/opentcs/util/Bundle");
    /**
     * A return status code - returned if Cancel button has been pressed.
     */
    public static final int RET_CANCEL = 0;
    /**
     * A return status code - returned if OK button has been pressed.
     */
    public static final int RET_OK = 1;
    /**
     * The list of connection param sets.
     */
    private final List<ConnectionParamSet> paramSets = new ArrayList<ConnectionParamSet>();
    private final List<String> serverSets = new ArrayList<String>();
    private ConnectionParamSet connectionParamSet;
    /**
     * This dialog's return status code.
     */
    private int returnStatus = RET_CANCEL;

    private UDPClient udpClient = new UDPClient();

    private volatile  boolean _3secondLater ;
    /**
     * Creates a new instance.
     */
    public SelectConnectServerDialog() {
        super((JFrame) null, true);
        getRMIServers();
        initComponents();
        initConnectionItems();
        getRootPane().setDefaultButton(okButton);
        setIconImages(Icons.getOpenTCSIcons());
        setLocationRelativeTo(null);
        pack();
    }


    /**
     * Returns the return status of this dialog.
     *
     * @return the return status of this dialog - one of {@link #RET_OK} or {@link #RET_CANCEL}.
     */
    public int getReturnStatus() {
        return returnStatus;
    }

    private void doClose(int retStatus) {
        returnStatus = retStatus;
        setVisible(false);
        dispose();
        udpClient.close();
    }

    /**
     * Initializes connection items.
     */
    private void initConnectionItems() {
        DefaultComboBoxModel<String> model = (DefaultComboBoxModel<String>) cbComboBox.getModel();
        model.removeAllElements();
        for (String server : serverSets) {
            model.addElement(server);
        }
    }

    private void  getRMIServers(){
        udpClient.getRMIServers();
        try {
            Thread.sleep(3000);
            _3secondLater=true;

        } catch (InterruptedException e) {
        }
    }

    // CHECKSTYLE:OFF

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        labelServers = new javax.swing.JLabel();

        panelButtons = new javax.swing.JPanel();
        okButton = new javax.swing.JButton();
        cancelButton = new CancelButton();
        cbComboBox = new javax.swing.JComboBox<>();
        setPreferredSize(new Dimension( 280,125));
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);


        ResourceBundle bundle = ResourceBundle.getBundle("org/opentcs/util/Bundle"); // NOI18N
        setTitle(bundle.getString("selectConnectServerDialog.title")); // NOI18N
        getContentPane().setLayout(new java.awt.GridBagLayout());

        labelServers.setFont(labelServers.getFont());
//        labelServers.setPreferredSize(new Dimension( 120,25));
        labelServers.setText(bundle.getString("selectConnectServerDialog.servers.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 8, 0, 4);
        getContentPane().add(labelServers, gridBagConstraints);

        cbComboBox.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        cbComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbComboBoxActionPerformed(evt);
            }
        });
        cbComboBox.setPreferredSize(new Dimension(100,22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
//      gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 0, 8);
        getContentPane().add(cbComboBox, gridBagConstraints);


        panelButtons.setLayout(new java.awt.GridBagLayout());

        okButton.setFont(okButton.getFont().deriveFont(okButton.getFont().getStyle() | java.awt.Font.BOLD));
        okButton.setText(bundle.getString("ConnectToServerDialog.okButton.text")); // NOI18N
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panelButtons.add(okButton, gridBagConstraints);

        cancelButton.setFont(cancelButton.getFont());
        cancelButton.setText(bundle.getString("ConnectToServerDialog.cancelButton.text")); // NOI18N
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panelButtons.add(cancelButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_END;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        getContentPane().add(panelButtons, gridBagConstraints);


        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        doClose(RET_OK);
    }//GEN-LAST:event_okButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        doClose(RET_CANCEL);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void cbComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbComboBoxActionPerformed
        DefaultComboBoxModel<String> model
                = (DefaultComboBoxModel<String>) cbComboBox.getModel();
        connectionParamSet = new ConnectionParamSet(model.getSelectedItem()+"|"+model.getSelectedItem()+"|"+BUNDLE.getString("selectConnectServerDialog.defaultPort"));
    }//GEN-LAST:event_cbComboBoxActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JComboBox<String> cbComboBox;
    private javax.swing.JLabel labelServers;
    private javax.swing.JButton okButton;
    private javax.swing.JPanel panelButtons;
    // End of variables declaration//GEN-END:variables
    // CHECKSTYLE:ON


    public ConnectionParamSet getConnectionParamSet() {
        return connectionParamSet;
    }

/*    public static void main(String[] args) {
        SelectConnectServerDialog dialog = new SelectConnectServerDialog();
        dialog.setVisible(true);
    }*/

    class UDPClient {
       volatile DatagramSocket socket = null;
        public void getRMIServers() {
            try {
                ResourceBundle bundle
                        = ResourceBundle.getBundle("org/opentcs/plantoverview/distribution/config/opentcs-plantoverview-defaults-baseline");
                socket =new DatagramSocket(Integer.valueOf(bundle.getString("selectConnectServerDialog.UDPClient.port")));
                byte[] arr = LSDefaultConstants.BROADCAST_TYPE_CHECKRMISERVER.getBytes();
                DatagramPacket packet = new DatagramPacket(arr, arr.length, InetAddress.getByName("255.255.255.255"),
                        Integer.valueOf(bundle.getString("selectConnectServerDialog.UDPServer.port")));
                socket.send(packet);

                new Thread(()->{
                    byte[] arr1=new byte[1024];
                    DatagramPacket packet1 = new DatagramPacket(arr1, arr1.length);
                    while(socket!=null && !socket.isClosed()){
                        try {
                            socket.receive(packet1);
                            packet.getData();
                            if(LSDefaultConstants.BROADCAST_RESULT_RMISERVER.equals(new String(arr1).trim())){
                                synchronized (SelectConnectServerDialog.this){
                                    serverSets.add(packet1.getAddress().getHostAddress());
                                    if(_3secondLater){
                                        initConnectionItems();
                                    }
                                }
                            }
                        } catch (IOException e) {
                        }

                    }
                }).start();
            }catch (Exception e){
                throw new RuntimeException(e);
            }

        }

        private void close(){
            if(this.socket!=null){
                this.socket.close();
            }
        }

    }

}
